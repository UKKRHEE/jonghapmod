#옷벗기기 효과
lolita_undress_character_effect = {
	if = {
		limit = {
			NOT = { has_character_flag = is_naked }
		}
		add_character_flag = {
			flag = is_naked
			days = 180 # So character won't stay naked forever when something goes wrong
		}
	}
	else = {
		# A local variable will be automatically removed after the event chain has been completed.
		set_local_variable = {
			name = character_was_already_naked
			value = yes
		}
	}
}

#옷입히기 효과
lolita_dress_character_effect = {
	if = {
		limit = {
			NOT = { exists = local_var:character_was_already_naked }
		}
		remove_character_flag = is_naked
	}
}

###########################################
#어른이 아닌 조교 시작시 자신의 나이가 21세 이상이면 1단계 아이들의 친구, 2단계 아이들의 비밀 친구 + 이상성욕 비밀 추가 
###########################################
groom_interaction_give_deviancy_effect = {
	if = {
		limit = {
			scope:recipient = { is_adult = no }
			scope:actor = { 
				NOR = { 
					age < 21
					has_trait = deviant
					any_secret = { secret_type = secret_deviant }
				}
			}
		}
		scope:actor = { 
			if = { 
				limit = { has_character_modifier = lolita_children_freind_modifier }
				random = {
					chance = {
						value = 100
						add = {
							add = intrigue
							multiply = -0.4
						}
					}
					send_interface_message = {
						type = culture_conversion
						title = secret_category_deviancy
						left_icon = scope:actor
						add_secret = { type = secret_deviant }
					}
					add_character_modifier = {
						modifier = lolita_children_true_freind_modifier
						years = 10
					}
					hidden_effect = { remove_character_modifier = lolita_children_freind_modifier }
				}
			}
			else = {
				random = {
					chance = {
						value = 50
						add = {
							add = intrigue
							multiply = -1
						}
					}
					send_interface_message = {
						type = culture_conversion
						title = secret_category_deviancy
						left_icon = scope:actor
						add_secret = { type = secret_deviant }
					}
				}
				random = {
					chance = {
						value = 100
						add = {
							add = intrigue
							multiply = -0.4
						}
					}
					add_character_modifier = {
						modifier = lolita_children_freind_modifier
						years = 10
					}
				}
			}
		}
	}
}

# 유혹 모략 1,2 단계 성공시 짝사랑 추가 전처리
seduce_ongoing_add_scheme_modifier_effect = {
	scope:scheme = {
		add_scheme_modifier = {
			type = seduce_$OUTCOME$_$MILESTONE$_modifier
		}
	}
	lolita_$OUTCOME$_add_scheme_modifier_effect = yes
}

# 유혹 모략 1,2 단계 성공시 짝사랑 추가
lolita_success_add_scheme_modifier_effect = {	
	if = {			
		limit = {
			scope:target = { 
				has_relation_guardian = scope:owner
				NOT = { has_relation_crush = scope:owner }
			}
			scope:scheme = {
				OR = { 
					has_scheme_modifier = seduce_success_1_modifier
					has_scheme_modifier = seduce_success_2_modifier
				}
			}
		}
		if = {
		 	limit = {
				scope:scheme = { 
					has_scheme_modifier = seduce_success_1_modifier
					has_scheme_modifier = seduce_success_2_modifier
				}
			}
			send_interface_message = {
				type = sway_good_message
				title = relation_crush
				left_icon = scope:target
				right_icon = scope:owner		
				scope:target = { set_relation_crush = scope:owner }
			}
		}
		else = {
			show_as_tooltip = { scope:target = { set_relation_crush = scope:owner } }
		}
	}	
}

# 유혹 모략 1,2 단계 성공시 짝사랑 추가 후처리
lolita_failure_add_scheme_modifier_effect = { }

# 조교 성공시 상호 구실 추가
give_mutual_hook_secret_friends = {
	scope:owner = {
		random_secret = {
			limit = {
				secret_type = secret_lover
				secret_target = scope:target
			}
			save_scope_as = lolita_lover_secret
		}
	}		
	
	if = {
		limit = { scope:target = { has_relation_crush = scope:owner } }
		replace_secret_hook_who_has_house_head_hook = {
			OWNER = scope:owner
			TARGET = scope:target
			HOOK_TYPE_HOUSE = fascinated_house_secret_friend_hook
			HOOK_TYPE_NORMAL = fascinated_secret_friend_hook
		}
	}
	else = {
		replace_secret_hook_who_has_house_head_hook = {
			OWNER = scope:owner
			TARGET = scope:target
			HOOK_TYPE_HOUSE = house_secret_friend_hook
			HOOK_TYPE_NORMAL = secret_friend_hook
		}
	}
	replace_secret_hook_who_has_house_head_hook = {
		OWNER = scope:target
		TARGET = scope:owner
		HOOK_TYPE_HOUSE = house_secret_friend_hook
		HOOK_TYPE_NORMAL = secret_friend_hook
	}
}

# 조교 성공시 가장 구실을 집안의 비밀친구 구실로 대체
replace_secret_hook_who_has_house_head_hook = {
	$OWNER$ = {
		if = {
			limit = { 
				has_hook_of_type = {
					target = $TARGET$
					type = house_head_hook
				}
			}
			add_hook = {
				target = $TARGET$
				type = $HOOK_TYPE_HOUSE$
				secret = scope:lolita_lover_secret
			}
		}
		else_if = {
			limit = {
				can_add_hook = {
					target = $TARGET$
					type = $HOOK_TYPE_NORMAL$
					secret = scope:lolita_lover_secret
				}
			}			
			add_hook = {
				target = $TARGET$
				type = $HOOK_TYPE_NORMAL$
				secret = scope:lolita_lover_secret
			}
		}
	}
}

#연인 폭로시 이상성욕이 있을 때 이상 성욕 알림 추가
save_additional_lover_secret_list_targets_for_feed_messages_effect = {
	#If it's a sodomy lover relation, also tell people who know of my sodomy secret
	if = {
		limit = { relation_with_character_is_sodomy_in_my_or_lieges_faith_trigger = { CHARACTER = scope:other_lover } }
		random_secret = {
			limit = { secret_type = secret_homosexual }
			every_secret_knower = {
				limit = {
					show_me_exposed_secret_feed_message_trigger = { SECRET = scope:secret CHARACTER = scope:owner }
					NOR = {
						any_in_list = { #These checks should remain here and not be in the scripted triggers
							list = send_exposed_secret_event_list
							this = prev
						}
						any_in_list = {
							list = send_exposed_secret_feed_message_list
							this = prev
						}
					}
				}
				add_to_list = send_exposed_secret_feed_message_list
			}
		}
	}
	#If it's a incest lover relation, also tell people who know of my incest secret
	if = {
		limit = { relation_with_character_is_incestuous_in_my_or_lieges_faith_trigger = { CHARACTER = scope:other_lover } }
		random_secret = {
			limit = { secret_type = secret_incest }
			every_secret_knower = {
				limit = {
					show_me_exposed_secret_feed_message_trigger = { SECRET = scope:secret CHARACTER = scope:owner }
					NOR = {
						any_in_list = { #These checks should remain here and not be in the scripted triggers
							list = send_exposed_secret_event_list
							this = prev
						}
						any_in_list = {
							list = send_exposed_secret_feed_message_list
							this = prev
						}
					}
				}
				add_to_list = send_exposed_secret_feed_message_list
			}
		}
	}
	#연인 폭로시 이상성욕이 있을 때 이상 성욕 알림 추가 (추가부분)
	if = {
		limit = { lolita_relation_is_deviancy_in_my_or_lieges_faith_trigger = { CHARACTER = scope:other_lover } }
		random_secret = {
			limit = { secret_type = secret_deviant }
			every_secret_knower = {
				limit = {
					show_me_exposed_secret_feed_message_trigger = { SECRET = scope:secret CHARACTER = scope:owner }
					NOR = {
						any_in_list = { #These checks should remain here and not be in the scripted triggers
							list = send_exposed_secret_event_list
							this = prev
						}
						any_in_list = {
							list = send_exposed_secret_feed_message_list
							this = prev
						}
					}
				}
				add_to_list = send_exposed_secret_feed_message_list
			}
		}
	}
}

#연인 폭로시 타겟이 어른이 아니면 이상성욕 비밀이 있을 때 이상 성욕 특성 추가
extramarital_sex_exposure_consequences_effect = {
	save_temporary_scope_as = sex_character
	save_temporary_scope_value_as = {
		name = spouse_event
		value = $SPOUSE_EVENT$
	}

	#APPLY TRAITS & REMOVE PIETY LEVELS
	add_adulterer_fornicator_trait_or_nothing_effect = yes
	remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = adulterer } #Fornicator falls under same doctrine
	if = {
		limit = {
			OR = {
				AND = {
					exists = scope:sex_partner
					relation_with_character_is_sodomy_in_my_or_lieges_faith_trigger = { CHARACTER = scope:sex_partner }
				}
				AND = {
					exists = scope:unknown_sex_partner
					relation_with_character_is_sodomy_in_my_or_lieges_faith_trigger = { CHARACTER = scope:unknown_sex_partner }
				}
			}
		}
		add_trait = sodomite
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = sodomite }
	}
	if = {
		limit = {
			exists = scope:sex_partner
			relation_with_character_is_incestuous_in_my_or_lieges_faith_trigger = { CHARACTER = scope:sex_partner }
		}
		add_trait = incestuous
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = incestuous }
	}
	####################추가부분
	if = {
		limit = {
			any_secret = { secret_type = secret_deviant }
			exists = scope:sex_partner
			lolita_relation_is_deviancy_in_my_or_lieges_faith_trigger = { CHARACTER = scope:sex_partner }
		}
		# 가문의 소녀가 농락당한 의견 + 이상성욕 획득 이벤트
		family_girl_was_fooled_opinion_effect = { SEX_CHARACTER = scope:sex_character SEX_PARTNER = scope:sex_partner }
	}
	##############################
	
	#APPLY UNFAITHFUL OPINIONS TOWARDS SPOUSES AND LOVERS (only visible for directly relevant exposure)
	if = {
		limit = {
			#OR = { #TODO_CD: commented out until TIT-16673 has been resolved due to errors
			#	scope:sex_character = root
			#	AND = {
			#		exists = scope:sex_partner
			#		scope:sex_partner = root
			#	}
			#	any_spouse = {
			#		this = root
			#	}
			#	any_relation = {
			#		type = soulmate
			#		this = root
			#	}
			#}
		}
		every_relation = {
			type = soulmate
			limit = {
				soulmate_relation_is_exclusive_trigger = yes
				NOT = { #So we don't add it both at discovery and exposure
					has_opinion_modifier = {
						target = scope:sex_character
						modifier = betrayed_our_promise
					}
				}
			}
			add_opinion = {
				target = scope:sex_character
				modifier = betrayed_our_promise
			}
		}

		every_spouse = {
			if = {
				limit = {
					NOT = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } }
				}
				add_opinion = {
					target = scope:sex_character
					modifier = unfaithful_spouse_exposed_opinion
				}			
			}
		}
	}
	else = {
		hidden_effect = {
			every_relation = {
				type = soulmate
				limit = {
					soulmate_relation_is_exclusive_trigger = yes
					NOT = { #So we don't add it both at discovery and exposure
						has_opinion_modifier = {
							target = scope:sex_character
							modifier = betrayed_our_promise
						}
					}
				}
				add_opinion = {
					target = scope:sex_character
					modifier = betrayed_our_promise
				}
			}

			every_spouse = {
				if = {
					limit = {
						NOT = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }  }
					}
					add_opinion = {
						target = scope:sex_character
						modifier = unfaithful_spouse_exposed_opinion
					}
				}		
			}
		}
	}
	every_spouse = {
		hidden_effect = {
			#Remove duplicate opinion from discovery
			if = {
				limit = {
					has_opinion_modifier = {
						target = scope:sex_character
						modifier = unfaithful_spouse_discovered_opinion
					}
				}
				remove_opinion = {
					target = scope:sex_character
					modifier = unfaithful_spouse_discovered_opinion
				}
			}
		}

		#NOTIFY SPOUSE (SHOULD ALWAYS BE "NO" IF EFFECT IS USED ON SECRET EXPOSURE)
		if = {
			limit = {
				scope:spouse_event = yes
				NOT = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } }
			}

			scope:sex_character = { save_scope_as = adultery_spouse }
			trigger_event = adultery.4001
		}
	}
}

seduce_outcome_discovered_expose_secrets_and_adultery_effect = {
	extramarital_sex_attempt_exposure_consequences_with_target_effect = { TARGET = $CHARACTER$ SPOUSE_EVENT = yes } #Adds trait
	if = {
		limit = { relation_with_character_is_incestuous_in_my_or_lieges_faith_trigger = { CHARACTER = $CHARACTER$ } }
		random_secret = {
			limit = { secret_type = secret_incest }
			expose_secret = $EXPOSER$
		}
	}
	if = {
		limit = { relation_with_character_is_sodomy_in_my_or_lieges_faith_trigger = { CHARACTER = $CHARACTER$ } }
		random_secret = {
			limit = { secret_type = secret_homosexual }
			expose_secret = $EXPOSER$
		}
	}
	if = {
		limit = { lolita_relation_is_deviancy_in_my_or_lieges_faith_trigger = { CHARACTER = $CHARACTER$ } }
		random_secret = {
			limit = { secret_type = deviant }
			expose_secret = $EXPOSER$
		}
	}
}

# 가문의 소녀가 농락당한 의견 + 이상성욕 획득 이벤트
family_girl_was_fooled_opinion_effect = {
	$SEX_CHARACTER$ = {
		every_spouse = {
			if = {
				limit = {
					OR = {
						faith = { has_doctrine_parameter = deviancy_shunned }
						faith = { has_doctrine_parameter = deviancy_illegal }
					}
				}
				add_opinion = {
					target = $SEX_CHARACTER$
					modifier = family_disgrace_opinion
				}			
			}	
		}
		every_close_or_extended_family_member = {
			if = {
				limit = {
					NOT = { $SEX_CHARACTER$ = this }
					OR = {
						faith = { has_doctrine_parameter = deviancy_shunned }
						faith = { has_doctrine_parameter = deviancy_illegal }
					}
				}
				add_opinion = {
					modifier = family_disgrace_opinion
					target = $SEX_CHARACTER$
				}
			}
		}
	}
	$SEX_PARTNER$ = {
		if = {
			limit = { is_close_or_extended_family_of = $SEX_CHARACTER$ }
			every_close_or_extended_family_member = {
				if = {
					limit = {
						NOT = { $SEX_CHARACTER$ = this }
						OR = {
							faith = { has_doctrine_parameter = deviancy_shunned }
							faith = { has_doctrine_parameter = deviancy_illegal }
						}
					}
					add_opinion = {
						modifier = incest_family_girl_was_fooled_opinion
						target = $SEX_CHARACTER$
					}
				}
			}
			$SEX_CHARACTER$ = { 
				save_scope_as = adultery_spouse
				trigger_event = adultery.4101
			}
		}
		else = {
			every_close_or_extended_family_member = {
				if = {
					limit = {
						OR = {
							faith = { has_doctrine_parameter = deviancy_shunned }
							faith = { has_doctrine_parameter = deviancy_illegal }
						}
					}
					add_opinion = {
						modifier = family_girl_was_fooled_opinion
						target = $SEX_CHARACTER$
					}
				}
			}
			$SEX_CHARACTER$ = { 
				save_scope_as = adultery_spouse
				trigger_event = adultery.4102
			}
		}
	}
}

remove_all_good_relation = {
	if = {
		limit = { 
			is_alive = yes
			NOT = { this = $TARGET$ }
		}
		if = {
			limit = { has_relation_lover = $TARGET$ }
			remove_relation_lover = $TARGET$
		}
		if = {
			limit = { has_relation_friend = $TARGET$ }
			remove_relation_friend = $TARGET$
		}
		if = {
			limit = { has_relation_best_friend = $TARGET$ }
			remove_relation_best_friend = $TARGET$
		}
		if = {
			limit = { has_relation_soulmate = $TARGET$ }
			remove_relation_soulmate = $TARGET$
		}
		hidden_effect = { 
			if = {
				limit = { has_relation_crush = $TARGET$ }
				remove_relation_crush = $TARGET$
			}
			seduction_block_character_effect = { CHARACTER = $TARGET$ }
		}
	}
}