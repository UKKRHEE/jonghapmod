#~The start button has some odd localization and I don't know how to fix it right now.
dag_cdo_slave_training = {

	skill = intrigue
	# cooldown = { months = 2 }					#~Should we re-enable this?
	uses_agents = yes
	power_per_skill_point = 8
	power_per_agent_skill_point = 1
	spymaster_power_per_skill_point = 0
	resistance_per_skill_point = 0
	spymaster_resistance_per_skill_point = 0
	uses_resistance = yes
	minimum_progress_chance = 40 #25
	maximum_progress_chance = 95
	minimum_success = 20
	maximum_success = 95

	allow = {
		#~This generates the odd localization?	
		is_adult = yes
		is_ai = no									#~Ideally we will get rid of this limitation at some point
		scope:target = {
			dag_cdo_slave_can_be_slave_trained_trigger = { TRAINER = scope:owner }
		}
		#Have I been blocked from targeting this character?
#		custom_description = { #Permanent
#			text = test_scheme_blocked
#			object = scope:target
#			NOT = {
#				scope:target = {
#					has_opinion_modifier = {
#						modifier = test_scheme_blocker_opinion
#						target = scope:owner
#					}
#				}
#			}
#		}	
	}

#		#AI blockers
#		trigger_if = {
#			limit = { is_ai = yes }
#
#			scope:target = {
#				opinion = {
#					target = scope:owner
#					value <= 50
#				}
#				trigger_if = { #So players don't get spammed by AI test_scheme
#					limit = {
#						is_ai = no
#					}
#					NOT = {
#						any_targeting_scheme = {
#							scheme_type = test_scheme
#						}
#					}
#				}
#			}
#		}
#	}

	valid = {
		#~This generates the odd localization?	
		is_physically_able_adult = yes
		scope:target = {
			OR = {
				exists = location
				in_diplomatic_range = scope:owner
			}
		}
	}

	#~Removed all Agents apart from Court Slaver until we think of a way of doing this that is not weird.
	#~Possibly add events where people actually ask if they can join in?
	valid_agent = {
		scope:owner = { has_relation_dag_cdo_court_slaver = prev }
	}


#	valid_agent = {
#		NOT = { this = scope:target }	#~Target will never scheme against themselves
#		is_capable_adult = yes
#		is_imprisoned = no
#		OR = {
#			scope:owner = { has_relation_dag_cdo_court_slaver = prev }
#			is_consort_of = scope:owner
#			AND = {
#				is_in_the_same_court_as = scope:target
#				OR = {
#					is_close_family_of = scope:owner
#					scope:owner = { has_relation_slave = prev }
#					#~Maybe add friends and/or lovers?
#				}
#			}
#		}
#	}
	
	agent_join_chance = {
		base = 0
		modifier = {
			add = 1000	#~You do not have to convince them to do their day job.
			scope:owner = { has_relation_dag_cdo_court_slaver = prev }
			desc = "SCHEME_AGENT_IS_COURT_SLAVER"
		}
	}
	
	
	
	
	
	
#	agent_join_chance = {
#		base = 0
#		modifier = {
#			add = 1000	#~You do not have to convince them to do their day job.
#			scope:owner = { has_relation_dag_cdo_court_slaver = prev }
#			desc = "SCHEME_AGENT_IS_COURT_SLAVER"
#		}
#		#~Everyone else needs to be either paid or convinced with a hook in case player thinks it's weird that their son joins in.
#		modifier = {
#			add = bribe_acceptance_value
#			exists = scope:gift
#			always = scope:gift
#			NOT = {
#				OR = {
#					scope:target = { is_parent_of = root }
#					root = { is_parent_of = scope:target }
#				}
#			}
#			desc = "SCHEME_WITH_GIFT"
#		}
#		modifier = {
#			add = {
#				if = {
#					limit = {
#						OR = {
#							has_personality_dominant_trigger = yes
#							has_trait = torturer
#							has_trait = sadistic
#						}
#					}
#					value = 0
#				}
#				else = {
#					value = -20
#					if = {
#						limit = {
#							ai_energy < 0
#						}
#						add = {
#							value = ai_energy
#							multiply = 0.5
#						}
#					}
#					if = {
#						limit = {
#							ai_compassion > 0
#						}
#						add = {
#							value = ai_compassion
#							multiply = -1
#						}
#					}
#				}
#			}
#			desc = BASE_RELUCTANCE
#		}		
#	}

	agent_success_chance = {
		base = 5
		modifier = {
			add = 4
			has_trait = torturer
			desc = DAG_CDO_TORTURER
		}
		modifier = {
			add = 4
			has_character_modifier = dag_cdo_slavers_guild_member
			desc = dag_cdo_slavers_guild_member
		}
	}

	base_success_chance = {
		base = 75
		#~Ideas: If we want to add success to any modifiers it appears the effect goes here
		modifier = {
			add = 15
			scope:target = { carn_has_fetish_trigger = { FETISH = submission } }
		}		
		modifier = {
			add = 10
			scope:target = { has_personality_submissive_trigger = yes }
			desc = dag_cdo_has_submissive_personality
		}
		modifier = {
			add = -10
			scope:target = { has_personality_dominant_trigger = yes }
			desc = dag_cdo_has_dominant_personality
		}
		modifier = {
			add = 8
			scope:owner = { has_trait = torturer }
			desc = dag_cdo_are_skilled_torturer
		}
		modifier = {
			add = 4
			scope:target = { has_character_modifier = dag_cdo_slave_branded }
			desc = dag_cdo_slave_is_branded
		}
		modifier = {	#~This is not really supposed to happen but you never know
			add = 4
			scope:owner = { has_character_modifier = dag_cdo_slavers_guild_member }
			desc = dag_cdo_slavers_guild_member
		}
		#~Rival penalty
		modifier = {
			add = -30
			desc = test_scheme_my_rival
			scope:owner = { has_relation_rival = scope:target }
		}
		#~Dynasty Kin Personal Scheme Success Chance on Dynasty Perk
		modifier = {
			add = kin_legacy_4_success_chance
			desc = KIN_LEGACY_DESC
			exists = scope:owner.dynasty
			scope:owner.dynasty = {
				has_dynasty_perk = kin_legacy_4
			}
			scope:target.dynasty = scope:owner.dynasty
		}		
		#~Thicker Than Water Perk
		modifier = {
			add = thicker_than_water_bonus
			desc = BEFRIEND_THICKER_THAN_WATER_PERK_DESC
			scope:owner = {
				has_perk = thicker_than_water_perk
			}
			scope:target = {
				is_close_or_extended_family_of = scope:owner
			}
		}
	}

	on_ready = {
		random = {
			chance = scope:scheme.scheme_success_chance

			save_scope_value_as = {
				name = scheme_successful
				value = yes
			}
		}
		scope:owner = {
			if = {
				limit = {
					exists = scope:scheme_successful
				}
				trigger_event = dag_cdo_slave_training_scheme_event.2000
			}
			else = {
				trigger_event = dag_cdo_slave_training_scheme_event.4000
			}
		}
	}

	on_invalidated = {
		#~Dead target
		if = {
			limit = {
				scheme_target = { is_alive = no }
			}
			scheme_owner = {
				trigger_event = dag_cdo_slave_training_scheme_event.0002
			}
		}
		#~Is no longer your slave (or submissive)
		if = {
			limit = {
				NOT = { scheme_progress = 100 }
				scheme_target = { is_alive = yes }
				scheme_owner = {
					NOR = {
						has_relation_slave = scope:scheme.scheme_target
						has_relation_submissive = scope:scheme.scheme_target
					}
				}
			}
			scheme_owner = {
				trigger_event = dag_cdo_slave_training_scheme_event.0001
			}
		}
		#~Misc conditions like trainer being imprisoned, no more diplo range
		else_if = { #~fallback invalidation
			limit = {
				OR = {
					scope:owner = { is_physically_able_adult = no }
					scope:target = {
						NOR = {
							exists = location
							in_diplomatic_range = scope:owner
						}
					}
				}
			}
			scheme_owner = {
				send_interface_message = {
					type = event_generic_neutral
					title = dag_cdo_slave_training
					left_icon = scope:target
					custom_tooltip = dag_cdo_slave_training_invalid
				}
			}
		}
	}

	#~trigger training start event
	on_start = {
		save_scope_as = scheme
		scheme_owner = { save_scope_as = owner }
		scheme_target = { save_scope_as = target }

		scope:scheme = {
			#dag_cdo_slave_training_set_dummy_variables = yes
			dag_cdo_slave_set_scheme_opinion_modifier = yes
		}
		scope:owner = {
			trigger_event = {
				on_action = dag_cdo_slave_training_start
				days = { 3 7 }
			}
		}
	}
	on_monthly = {
		save_scope_as = scheme
		scheme_owner = { save_scope_as = owner }
		scheme_target = { save_scope_as = target }

		scope:scheme = {
			dag_cdo_slave_set_scheme_opinion_modifier = yes
		}

		#~First random training event
		if = {
			limit = {
				scheme_progress >= 2
				NOT = { has_scheme_modifier = dag_cdo_slave_training_milestone_scheme_power_1 }
			}
			scheme_owner = {
				trigger_event = { on_action = dag_cdo_slave_training_default_event_selection }
			}
		}
		#~Second random training event
		if = {
			limit = {
				scheme_progress >= 4
				NOT = { has_scheme_modifier = dag_cdo_slave_training_milestone_scheme_power_2 }
			}
			scheme_owner = {
				trigger_event = { on_action = dag_cdo_slave_training_default_event_selection }
			}
		}
		#~Third random training event
		if = {
			limit = {
				scheme_progress >= 7
				NOT = { has_scheme_modifier = dag_cdo_slave_training_milestone_scheme_power_3 }
			}
			scheme_owner = {
				trigger_event = { on_action = dag_cdo_slave_training_default_event_selection }
			}
		}
	}
	success_desc = "DAG_CDO_SLAVE_TRAINING_SUCCESS_DESC"
}
